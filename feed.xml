<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Austin</title><subtitle>개발 기록 블로그</subtitle> <updated>2023-05-23T08:39:28+00:00</updated> <author> <name>ghkdqhrbals</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 ghkdqhrbals </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>실시간 채팅방 구현(19) - (현재까지의 일정관리 Notion)</title><link href="/posts/chatting(19)/" rel="alternate" type="text/html" title="실시간 채팅방 구현(19) - (현재까지의 일정관리 Notion)" /><published>2023-01-27T01:00:25+00:00</published> <updated>2023-01-27T01:00:25+00:00</updated> <id>/posts/chatting(19)/</id> <content src="/posts/chatting(19)/" /> <author> <name>ghkdqhrbals</name> </author> <category term="채팅서버 프로젝트" /> <category term="일정관리" /> <summary> 프로젝트 전체 일정 현재 진행중인 스프린트 </summary> </entry> <entry><title>실시간 채팅방 구현(18) - (성능개선 사안들 및 적용된 값)</title><link href="/posts/chatting(18)/" rel="alternate" type="text/html" title="실시간 채팅방 구현(18) - (성능개선 사안들 및 적용된 값)" /><published>2023-01-27T01:00:25+00:00</published> <updated>2023-05-23T08:38:19+00:00</updated> <id>/posts/chatting(18)/</id> <content src="/posts/chatting(18)/" /> <author> <name>ghkdqhrbals</name> </author> <category term="채팅서버 프로젝트" /> <category term="성능문제 개선" /> <summary> 성능개선사안들 및 적용된 값들 batch &amp;lt;– 성능을 가장 많이 개선시킨 부분(네트워크 로드 감소) before : 1 after : 100 chatting_id 내부 자동 생성(네트워크 로드 감소) before : from db sequence after : random.UUID db parallel processor 확장(db cpu 사용률 증가) before : 1개 after : 8개 쿼리 빈도 축소( 최적화 + lazy fetch ) before : 6번 after : 4번 서버 수평 확장 ... </summary> </entry> <entry><title>실시간 채팅방 구현(17) - (프론트 서버 개발 완료 및 성능이슈 발생)</title><link href="/posts/chatting(17)/" rel="alternate" type="text/html" title="실시간 채팅방 구현(17) - (프론트 서버 개발 완료 및 성능이슈 발생)" /><published>2023-01-24T01:00:25+00:00</published> <updated>2023-01-29T08:19:41+00:00</updated> <id>/posts/chatting(17)/</id> <content src="/posts/chatting(17)/" /> <author> <name>ghkdqhrbals</name> </author> <category term="채팅서버 프로젝트" /> <category term="프로젝트 진행" /> <summary> INDEX Batch JPA batch JDBC batch 일반적인 성능비교 그래서 Chatting을 insert할 때는 어떤 방식이 좋을까? 이슈비교 그 외 종합 성능비교 그래프 결론 기능 설명 및 시연영상 https://www.youtube.com/watch?v=3VqwZ17XyEQ&amp;amp;t=237s 현재는 4.2.0 버전이며 프론트 서버까지 모두 완료되었다! 이후, 실제 트래픽양이 많은 chat을 이전에 만들어둔 Go 프로그램으로 테스트 해보았더니, 아래와 같이 성능결과가 암울했다. 약 10K개의 채팅을 수용하는데 80초가 소요된 것이다. test-multiple-... </summary> </entry> <entry><title>실시간 채팅방 구현(16) - (프론트 서버의 예상 UI + 시퀀스 다이어그램 + HTTP 송/수신 방법 정의)</title><link href="/posts/chatting(16)/" rel="alternate" type="text/html" title="실시간 채팅방 구현(16) - (프론트 서버의 예상 UI + 시퀀스 다이어그램 + HTTP 송/수신 방법 정의)" /><published>2023-01-20T01:00:25+00:00</published> <updated>2023-01-29T08:19:41+00:00</updated> <id>/posts/chatting(16)/</id> <content src="/posts/chatting(16)/" /> <author> <name>ghkdqhrbals</name> </author> <category term="채팅서버 프로젝트" /> <category term="프로젝트 진행" /> <summary> INDEX(프론트 서버 설계) 예상 UI 시퀀스 다이어그램 프론트 HTTP request/response 비동기 or Non-blocking? 예상 UI 앞서 우리는 API Gateway까지 백엔드 전체를 생성했다. 이제 실제 body와 uri를 게이트웨이에 전송하는 프론트 서버를 만들어 볼 것이다. 먼저 Protopie 툴을 통해서 간단히 예상되는 UI를 만들고 시뮬레이션 해보았다. 화면목록 1 : 로그인 2 : 회원등록 3 : 메인 4 : 상태메세지 변경 5 : 친구 추가 6 : 채팅방 목록 7 : 채팅방 추가 8 : 채팅방 시퀀스 다이어그램 간단하게 1... </summary> </entry> <entry><title>실시간 채팅방 구현(15) - (대량 Rest api test 시 속도문제 해결과정-2)</title><link href="/posts/chatting(15)/" rel="alternate" type="text/html" title="실시간 채팅방 구현(15) - (대량 Rest api test 시 속도문제 해결과정-2)" /><published>2023-01-17T01:00:25+00:00</published> <updated>2023-01-29T08:19:41+00:00</updated> <id>/posts/chatting(15)/</id> <content src="/posts/chatting(15)/" /> <author> <name>ghkdqhrbals</name> </author> <category term="채팅서버 프로젝트" /> <category term="성능문제 개선" /> <summary> 이전 테스트에서 발생한 성능이슈를 (1)Server 수평확장 및 (2)Docker 할당 리소스 추가로 10K HTTP request 테스트의 response까지 걸리는 시간을 110초에서 49초로 감소시켰다. 이번에는 Spring Jpa Batch를 통해 49초에서 23초로 감소시킨다. NOTICE 쿼리튜닝이 아직 생소하기때문에 내용이 정확하지 않을 수 있습니다(특히 JDBC batch!). 혹시 잘못된 내용을 보신다면, ghkdqhrbals@gmail.com 로 메일주시면 정말정말 감사하겠습니다 :) INDEX(의심가는 부분) AuthServer –&amp;gt; AuthDB 네트워크 오버로드 1-1. 개선 결과(49초 -&amp;gt; 23초) 1-2. 추가 고려점 1. ... </summary> </entry> </feed>
